-- Drop tables if exist
DROP TABLE IF EXISTS TWEETS;
DROP TABLE IF EXISTS SCHEDULED_TWEETS;
DROP TABLE IF EXISTS ACCOUNTS;
DROP TABLE IF EXISTS BATCH_HISTORY;

-- Create ACCOUNTS table
CREATE TABLE IF NOT EXISTS ACCOUNTS (
    id VARCHAR(20) PRIMARY KEY NOT NULL,
    name VARCHAR(50) NOT NULL,
    bio VARCHAR(200) NOT NULL,
    icon VARCHAR(100) DEFAULT '/src/assets/icons/user/default_icon.svg',
    header_photo VARCHAR(100) DEFAULT '/src/assets/images/header/default_header.jpg',
    location VARCHAR(50),
    birthday DATE CHECK (birthday < CURRENT_DATE),
    registered DATE NOT NULL DEFAULT CURRENT_DATE CHECK (registered <= CURRENT_DATE),
    following INT NOT NULL DEFAULT 0,
    follower INT NOT NULL DEFAULT 0,
    valid_flag INT NOT NULL DEFAULT 1,
    delete_flag INT NOT NULL DEFAULT 0
);
CREATE INDEX idx_accounts_valid_flag ON ACCOUNTS (valid_flag);
CREATE INDEX idx_accounts_delete_flag ON ACCOUNTS (delete_flag);

-- Create TWEETS table
CREATE TABLE IF NOT EXISTS TWEETS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    account_id VARCHAR(20) NOT NULL,
    text VARCHAR(200) NOT NULL,
    image VARCHAR(100),
    likes INT NOT NULL DEFAULT 0,
    retweets INT NOT NULL DEFAULT 0,
    replies INT NOT NULL DEFAULT 0,
    views INT NOT NULL DEFAULT 0,
    datetime DATETIME(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    location VARCHAR(50),
    delete_flag INT NOT NULL DEFAULT 0
);
CREATE INDEX idx_tweets_account_id ON TWEETS (account_id);
CREATE INDEX idx_tweets_datetime ON TWEETS (datetime);
CREATE INDEX idx_tweets_delete_flag ON TWEETS (delete_flag);

-- Create SCHEDULED_TWEETS table
CREATE TABLE IF NOT EXISTS SCHEDULED_TWEETS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    account_id VARCHAR(20) NOT NULL,
    text VARCHAR(200) NOT NULL,
    image VARCHAR(100),
    location VARCHAR(50),
    scheduled_datetime DATETIME(0) NOT NULL,
    created_datetime DATETIME(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    delete_flag INT NOT NULL DEFAULT 0
);
CREATE INDEX idx_scheduled_tweets_account_id ON SCHEDULED_TWEETS (account_id);
CREATE INDEX idx_scheduled_tweets_scheduled_datetime ON SCHEDULED_TWEETS (scheduled_datetime);
CREATE INDEX idx_scheduled_tweets_delete_flag ON SCHEDULED_TWEETS (delete_flag);

-- Create BATCH_HISTORY table
CREATE TABLE IF NOT EXISTS BATCH_HISTORY (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    latest_processed_id INT NOT NULL,
    processed_num INT NOT NULL,
    execution_start DATETIME(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    execution_end DATETIME(0),
    succeeded INT NOT NULL DEFAULT 0
);
CREATE INDEX idx_batch_history_latest_processed_id ON BATCH_HISTORY (latest_processed_id);
CREATE INDEX idx_batch_history_execution_start ON BATCH_HISTORY (execution_start);

-- Drop batch meta tables if exist
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;
DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_SEQ;
DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_SEQ;
DROP TABLE IF EXISTS BATCH_JOB_SEQ;

CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE CLOB,
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
        REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    PARAMETER_NAME VARCHAR(100) NOT NULL,
    PARAMETER_TYPE VARCHAR(100) NOT NULL,
    PARAMETER_VALUE CLOB,
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE CLOB,
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
        REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID BIGINT PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
        REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);

CREATE TABLE BATCH_JOB_SEQ (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);
